(window.webpackJsonp=window.webpackJsonp||[]).push([["pl-styleguide"],{"./src/scripts/components/styleguide.js":function(module,exports){eval("/**\r\n * Styleguide.js - misc UI logic for Pattern Lab that needs refactoring\r\n */\n// import $ from 'jquery';\n// import Mousetrap from 'mousetrap';\n// import { urlHandler, DataSaver, patternName } from '../utils';\n// import { store } from '../store.js'; // connect to the Redux store.\n// import { updateViewportPx, updateViewportEm } from '../actions/app.js'; // redux actions needed\n// import { minViewportWidth, maxViewportWidth } from '../utils';\n// (function(w) {\n//   let sw = document.body.clientWidth; //Viewport Width\n// const viewportResizeHandleWidth = 14; //Width of the viewport drag-to-resize handle\n// const $sgIframe = $('.pl-js-iframe'); //Viewport element\n// const $sizePx = $('#pl-size-px'); //Px size input element in toolbar\n// const $sizeEms = $('#pl-size-em'); //Em size input element in toolbar\n// let discoID = false;\n// let discoMode = false;\n// let fullMode = true;\n// let hayMode = false;\n//Update dimensions on resize\n// $(w).resize(function() {\n//   sw = document.body.clientWidth;\n//   if (fullMode === true) {\n//     sizeiframe(sw, false);\n//   }\n// });\n//Size View Events\n// handle small button\n// function goSmall() {\n//   killDisco();\n//   killHay();\n//   fullMode = false;\n//   sizeiframe(\n//     getRandom(\n//       minViewportWidth,\n//       window.config.ishViewportRange !== undefined\n//         ? parseInt(window.config.ishViewportRange.s[1], 10)\n//         : 500\n//     )\n//   );\n// }\n// $('#pl-size-s').on('click', function(e) {\n//   e.preventDefault();\n//   goSmall();\n// });\nMousetrap.bind('ctrl+shift+s', function (e) {\n  goSmall();\n  return false;\n}); // // handle medium button\n// function goMedium() {\n//   killDisco();\n//   killHay();\n//   fullMode = false;\n//   sizeiframe(\n//     getRandom(\n//       window.config.ishViewportRange !== undefined\n//         ? parseInt(window.config.ishViewportRange.m[0], 10)\n//         : 500,\n//       window.config.ishViewportRange !== undefined\n//         ? parseInt(window.config.ishViewportRange.m[1], 10)\n//         : 800\n//     )\n//   );\n// }\n// $('#pl-size-m').on('click', function(e) {\n//   e.preventDefault();\n//   goMedium();\n// });\n\nMousetrap.bind('ctrl+shift+m', function (e) {\n  goMedium();\n  return false;\n}); // // handle large button\n// function goLarge() {\n//   killDisco();\n//   killHay();\n//   fullMode = false;\n//   sizeiframe(\n//     getRandom(\n//       window.config.ishViewportRange !== undefined\n//         ? parseInt(window.config.ishViewportRange.l[0], 10)\n//         : 800,\n//       maxViewportWidth\n//     )\n//   );\n// }\n// $('#pl-size-l').on('click', function(e) {\n//   e.preventDefault();\n//   goLarge();\n// });\n\nMousetrap.bind('ctrl+shift+l', function (e) {\n  goLarge();\n  return false;\n}); // //Click Full Width Button\n// $('#pl-size-full').on('click', function(e) {\n//   //Resets\n//   e.preventDefault();\n//   killDisco();\n//   killHay();\n//   fullMode = true;\n//   sizeiframe(sw);\n// });\n//Click Random Size Button\n\n$('#pl-size-random').on('click', function (e) {\n  e.preventDefault();\n  killDisco();\n  killHay();\n  fullMode = false;\n  sizeiframe(getRandom(minViewportWidth, sw));\n}); //Click for Disco Mode, which resizes the viewport randomly\n\n$('#pl-size-disco').on('click', function (e) {\n  e.preventDefault();\n  killHay();\n  fullMode = false;\n\n  if (discoMode) {\n    killDisco();\n  } else {\n    startDisco();\n  }\n}); // Disco Mode\n\nfunction disco() {\n  sizeiframe(getRandom(minViewportWidth, sw));\n}\n\nfunction killDisco() {\n  discoMode = false;\n  clearInterval(discoID);\n  discoID = false;\n}\n\nfunction startDisco() {\n  discoMode = true;\n  discoID = setInterval(disco, 800);\n}\n\nMousetrap.bind('ctrl+shift+d', function (e) {\n  if (!discoMode) {\n    startDisco();\n  } else {\n    killDisco();\n  }\n\n  return false;\n}); //Stephen Hay Mode - \"Start with the small screen first, then expand until it looks like shit. Time for a breakpoint!\"\n\n$('#pl-size-hay').on('click', function (e) {\n  e.preventDefault();\n  killDisco();\n\n  if (hayMode) {\n    killHay();\n  } else {\n    startHay();\n  }\n}); //Stop Hay! Mode\n\nfunction killHay() {\n  var currentWidth = $sgIframe.width();\n  hayMode = false;\n  $sgIframe.removeClass('hay-mode');\n  $('.pl-js-vp-iframe-container').removeClass('hay-mode');\n  sizeiframe(Math.floor(currentWidth));\n} // start Hay! mode\n// function startHay() {\n//   hayMode = true;\n//   $('.pl-js-vp-iframe-container')\n//     .removeClass('vp-animate')\n//     .width(minViewportWidth + viewportResizeHandleWidth);\n//   $sgIframe.removeClass('vp-animate').width(minViewportWidth);\n//   const timeoutID = window.setTimeout(function() {\n//     $('.pl-js-vp-iframe-container')\n//       .addClass('hay-mode')\n//       .width(maxViewportWidth + viewportResizeHandleWidth);\n//     $sgIframe.addClass('hay-mode').width(maxViewportWidth);\n//     setInterval(function() {\n//       const vpSize = $sgIframe.width();\n//       updateSizeReading(vpSize);\n//     }, 100);\n//   }, 200);\n// }\n// start hay from a keyboard shortcut\n// Mousetrap.bind('ctrl+shift+h', function(e) {\n//   if (!hayMode) {\n//     startHay();\n//   } else {\n//     killHay();\n//   }\n// });\n//Pixel input\n\n\n$sizePx.on('keydown', function (e) {\n  var val = Math.floor($(this).val());\n\n  if (e.keyCode === 38) {\n    //If the up arrow key is hit\n    val++;\n    sizeiframe(val, false);\n  } else if (e.keyCode === 40) {\n    //If the down arrow key is hit\n    val--;\n    sizeiframe(val, false);\n  } else if (e.keyCode === 13) {\n    //If the Enter key is hit\n    e.preventDefault();\n    sizeiframe(val); //Size Iframe to value of text box\n\n    $(this).blur();\n  }\n});\n$sizePx.on('keyup', function () {\n  var val = Math.floor($(this).val());\n  updateSizeReading(val, 'px', 'updateEmInput');\n}); //Em input\n\n$sizeEms.on('keydown', function (e) {\n  var val = parseFloat($(this).val());\n\n  if (e.keyCode === 38) {\n    //If the up arrow key is hit\n    val++;\n    sizeiframe(Math.floor(val * $bodySize), false);\n  } else if (e.keyCode === 40) {\n    //If the down arrow key is hit\n    val--;\n    sizeiframe(Math.floor(val * $bodySize), false);\n  } else if (e.keyCode === 13) {\n    //If the Enter key is hit\n    e.preventDefault();\n    sizeiframe(Math.floor(val * $bodySize)); //Size Iframe to value of text box\n  }\n});\n$sizeEms.on('keyup', function () {\n  var val = parseFloat($(this).val());\n  updateSizeReading(val, 'em', 'updatePxInput');\n}); // set 0 to 320px as a default\n\nMousetrap.bind('ctrl+shift+0', function (e) {\n  e.preventDefault();\n  sizeiframe(320, true);\n  return false;\n}); // //Resize the viewport\n// //'size' is the target size of the viewport\n// //'animate' is a boolean for switching the CSS animation on or off. 'animate' is true by default, but can be set to false for things like nudging and dragging\n// function sizeiframe(size, animate) {\n//   let theSize;\n//   console.log('sizeiframe');\n//   // @todo: refactor to better handle the iframe async rendering\n//   if (document.querySelector('.pl-js-iframe')){\n//     if (size > maxViewportWidth) {\n//       //If the entered size is larger than the max allowed viewport size, cap value at max vp size\n//       theSize = maxViewportWidth;\n//     } else if (size < minViewportWidth) {\n//       //If the entered size is less than the minimum allowed viewport size, cap value at min vp size\n//       theSize = minViewportWidth;\n//     } else {\n//       theSize = size;\n//     }\n//     //Conditionally remove CSS animation class from viewport\n//     if (animate === false) {\n//       $('.pl-js-vp-iframe-container, .pl-js-iframe').removeClass('vp-animate'); //If aninate is set to false, remove animate class from viewport\n//     } else {\n//       $('.pl-js-vp-iframe-container, .pl-js-iframe').addClass('vp-animate');\n//     }\n//     $('.pl-js-vp-iframe-container').width(theSize + viewportResizeHandleWidth); //Resize viewport wrapper to desired size + size of drag resize handler\n//     $sgIframe.width(theSize); //Resize viewport to desired size\n//     const state = store.getState();\n//     const isViewallPage = state.app.isViewallPage;\n//     const targetOrigin =\n//       window.location.protocol === 'file:'\n//         ? '*'\n//         : window.location.protocol + '//' + window.location.host;\n//     const obj = JSON.stringify({\n//       event: 'patternLab.resize',\n//       resize: 'true',\n//     });\n//     document\n//       .querySelector('.pl-js-iframe')\n//       .contentWindow.postMessage(obj, targetOrigin);\n//     updateSizeReading(theSize); //Update values in toolbar\n//     saveSize(theSize); //Save current viewport to cookie\n//   }\n// }\n// $('.pl-js-vp-iframe-container').on(\n//   'transitionend webkitTransitionEnd',\n//   function(e) {\n//     const targetOrigin =\n//       window.location.protocol === 'file:'\n//         ? '*'\n//         : window.location.protocol + '//' + window.location.host;\n//     const obj = JSON.stringify({\n//       event: 'patternLab.resize',\n//       resize: 'true',\n//     });\n//     document\n//       .querySelector('.pl-js-iframe')\n//       .contentWindow.postMessage(obj, targetOrigin);\n//   }\n// );\n// function saveSize(size) {\n//   if (!DataSaver.findValue('vpWidth')) {\n//     DataSaver.addValue('vpWidth', size);\n//   } else {\n//     DataSaver.updateValue('vpWidth', size);\n//   }\n// }\n// /* Returns a random number between min and max */\n// function getRandom(min, max) {\n//   return Math.floor(Math.random() * (max - min) + min);\n// }\n//Update The viewport size\n// function updateViewportWidth(size) {\n//   // @todo: update to conditionally adjust behavior of viewall page width\n//   const state = store.getState();\n//   const isViewallPage = state.app.isViewallPage;\n//   if(!isViewallPage){\n//     $('.pl-js-iframe').width(size);\n//     $('.pl-js-vp-iframe-container').width(size * 1 + 14);\n//   }\n//   updateSizeReading(size);\n// }\n// $('.pl-js-vp-iframe-container').on('touchstart', function(event) {});\n// handles widening the \"viewport\"\n//   1. on \"mousedown\" store the click location\n//   2. make a hidden div visible so that it can track mouse movements and make sure the pointer doesn't get lost in the iframe\n//   3. on \"mousemove\" calculate the math, save the results to a cookie, and update the viewport\n// $('.pl-js-resize-handle').mousedown(function(event) {\n//   // capture default data\n//   const origClientX = event.clientX;\n//   const origViewportWidth = $sgIframe.width();\n//   fullMode = false;\n//   // show the cover\n//   $('.pl-js-viewport-cover').css('display', 'block');\n//   // add the mouse move event and capture data. also update the viewport width\n//   $('.pl-js-viewport-cover').mousemove(function(e) {\n//     const viewportWidth = origViewportWidth + 2 * (e.clientX - origClientX);\n//     if (viewportWidth > minViewportWidth) {\n//       if (!DataSaver.findValue('vpWidth')) {\n//         DataSaver.addValue('vpWidth', viewportWidth);\n//       } else {\n//         DataSaver.updateValue('vpWidth', viewportWidth);\n//       }\n//       sizeiframe(viewportWidth, false);\n//     }\n//   });\n//   return false;\n// });\n// on \"mouseup\" we unbind the \"mousemove\" event and hide the cover again\n// $('body').mouseup(function() {\n//   $('.pl-js-viewport-cover').unbind('mousemove');\n//   $('.pl-js-viewport-cover').css('display', 'none');\n// });\n// capture the viewport width that was loaded and modify it so it fits with the pull bar\n// const origViewportWidth = $('.pl-js-iframe').width();\n// $('.pl-js-vp-iframe-container').width(origViewportWidth);\n// let testWidth = window.screen.width;\n// if (window.orientation !== undefined) {\n//   testWidth =\n//     window.orientation === 0 ? window.screen.width : window.screen.height;\n// }\n// if (\n//   $(window).width() === testWidth &&\n//   'ontouchstart' in document.documentElement &&\n//   $(window).width() <= 1024\n// ) {\n//   $('.pl-js-resize-container').width(0);\n// } else {\n//   $('.pl-js-iframe').width(origViewportWidth - 14);\n// }\n// updateSizeReading($('.pl-js-iframe').width());\n// get the request vars\n\nvar oGetVars = urlHandler.getRequestVars(); // pre-load the viewport width\n\nvar vpWidth = 0;\nvar trackViewportWidth = true; // can toggle this feature on & off\n// if (oGetVars.h !== undefined || oGetVars.hay !== undefined) {\n//   startHay();\n// } else if (oGetVars.d !== undefined || oGetVars.disco !== undefined) {\n//   startDisco();\n// } else if (oGetVars.w !== undefined || oGetVars.width !== undefined) {\n//   vpWidth = oGetVars.w !== undefined ? oGetVars.w : oGetVars.width;\n//   vpWidth =\n//     vpWidth.indexOf('em') !== -1\n//       ? Math.floor(Math.floor(vpWidth.replace('em', '')) * $bodySize)\n//       : Math.floor(vpWidth.replace('px', ''));\n//   DataSaver.updateValue('vpWidth', vpWidth);\n//   updateViewportWidth(vpWidth);\n// } else if (trackViewportWidth && (vpWidth = DataSaver.findValue('vpWidth'))) {\n//   updateViewportWidth(vpWidth);\n// }\n// watch the iframe source so that it can be sent back to everyone else.\n// based on the great MDN docs at https://developer.mozilla.org/en-US/docs/Web/API/window.postMessage\n\nfunction receiveIframeMessage(event) {\n  // does the origin sending the message match the current host? if not dev/null the request\n  if (window.location.protocol !== 'file:' && event.origin !== window.location.protocol + '//' + window.location.host || event.data === '' // message received, but no data included; prevents JSON.parse error below\n  ) {\n      return;\n    }\n\n  var data = {};\n\n  try {\n    data = typeof event.data !== 'string' ? event.data : JSON.parse(event.data);\n  } catch (e) {// @todo: how do we want to handle exceptions here?\n  }\n\n  if (data.event !== undefined) {\n    if (data.event === 'patternLab.pageLoad') {// if (!urlHandler.skipBack) {\n      //   if (\n      //     window.history.state === undefined ||\n      //     window.history.state === null ||\n      //     window.history.state.pattern !== data.patternpartial\n      //   ) {\n      //     urlHandler.pushPattern(data.patternpartial, data.path);\n      //   }\n      //   /*\n      // \tif (wsnConnected) {\n      // \t  var iFramePath = urlHandler.getFileName(data.patternpartial);\n      // \t  wsn.send( '{\"url\": \"'+iFramePath+'\", \"patternpartial\": \"'+event.data.patternpartial+'\" }' );\n      // \t}\n      // \t*/\n      // }\n      // // reset the defaults\n      // urlHandler.skipBack = false;\n    } else if (data.event === 'patternLab.keyPress') {\n      if (data.keyPress === 'ctrl+shift+s') {\n        goSmall();\n      } else if (data.keyPress === 'ctrl+shift+m') {\n        goMedium();\n      } else if (data.keyPress === 'ctrl+shift+l') {\n        goLarge();\n      } else if (data.keyPress === 'ctrl+shift+d') {\n        if (!discoMode) {\n          startDisco();\n        } else {\n          killDisco();\n        }\n      } else if (data.keyPress === 'ctrl+shift+h') {\n        if (!hayMode) {\n          startHay();\n        } else {\n          killHay();\n        }\n      } else if (data.keyPress === 'ctrl+shift+0') {\n        sizeiframe(320, true);\n      } // @todo: chat with Brian on if this code is still used and necessary; both the `mqs` and `found` variables are both currently undefined.\n      // else if (found === data.keyPress.match(/ctrl\\+shift\\+([1-9])/)) {\n      //   let val = mqs[found[1] - 1];\n      //   const type = val.indexOf('px') !== -1 ? 'px' : 'em';\n      //   val = val.replace(type, '');\n      //   const width = type === 'px' ? val * 1 : val * $bodySize;\n      //   sizeiframe(width, true);\n      // }\n      // return false;\n\n    }\n  }\n}\n\nwindow.addEventListener('message', receiveIframeMessage, false); // })(this);\n\n//# sourceURL=webpack:///./src/scripts/components/styleguide.js?")}}]);