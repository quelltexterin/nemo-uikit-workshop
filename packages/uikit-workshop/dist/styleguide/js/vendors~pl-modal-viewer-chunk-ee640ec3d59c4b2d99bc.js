(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~pl-modal-viewer"],{

/***/ "./node_modules/scroll-js/dist/scroll.js":
/*!***********************************************!*\
  !*** ./node_modules/scroll-js/dist/scroll.js ***!
  \***********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (f) {\n  if (( false ? undefined : _typeof(exports)) === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var g; }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return require(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) {\n        o(t[i]);\n      }\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (require, module, exports) {\n      (function (process, global) {\n        /*!\n         * @overview es6-promise - a tiny implementation of Promises/A+.\n         * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n         * @license   Licensed under MIT license\n         *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n         * @version   v4.2.4+314e4831\n         */\n        (function (global, factory) {\n          _typeof(exports) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.ES6Promise = factory();\n        })(this, function () {\n          'use strict';\n\n          function objectOrFunction(x) {\n            var type = _typeof(x);\n\n            return x !== null && (type === 'object' || type === 'function');\n          }\n\n          function isFunction(x) {\n            return typeof x === 'function';\n          }\n\n          var _isArray = void 0;\n\n          if (Array.isArray) {\n            _isArray = Array.isArray;\n          } else {\n            _isArray = function _isArray(x) {\n              return Object.prototype.toString.call(x) === '[object Array]';\n            };\n          }\n\n          var isArray = _isArray;\n          var len = 0;\n          var vertxNext = void 0;\n          var customSchedulerFn = void 0;\n\n          var asap = function asap(callback, arg) {\n            queue[len] = callback;\n            queue[len + 1] = arg;\n            len += 2;\n\n            if (len === 2) {\n              // If len is 2, that means that we need to schedule an async flush.\n              // If additional callbacks are queued before the queue is flushed, they\n              // will be processed by this flush that we are scheduling.\n              if (customSchedulerFn) {\n                customSchedulerFn(flush);\n              } else {\n                scheduleFlush();\n              }\n            }\n          };\n\n          function setScheduler(scheduleFn) {\n            customSchedulerFn = scheduleFn;\n          }\n\n          function setAsap(asapFn) {\n            asap = asapFn;\n          }\n\n          var browserWindow = typeof window !== 'undefined' ? window : undefined;\n          var browserGlobal = browserWindow || {};\n          var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n          var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]'; // test for web worker but not in IE10\n\n          var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined'; // node\n\n          function useNextTick() {\n            // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n            // see https://github.com/cujojs/when/issues/410 for details\n            return function () {\n              return process.nextTick(flush);\n            };\n          } // vertx\n\n\n          function useVertxTimer() {\n            if (typeof vertxNext !== 'undefined') {\n              return function () {\n                vertxNext(flush);\n              };\n            }\n\n            return useSetTimeout();\n          }\n\n          function useMutationObserver() {\n            var iterations = 0;\n            var observer = new BrowserMutationObserver(flush);\n            var node = document.createTextNode('');\n            observer.observe(node, {\n              characterData: true\n            });\n            return function () {\n              node.data = iterations = ++iterations % 2;\n            };\n          } // web worker\n\n\n          function useMessageChannel() {\n            var channel = new MessageChannel();\n            channel.port1.onmessage = flush;\n            return function () {\n              return channel.port2.postMessage(0);\n            };\n          }\n\n          function useSetTimeout() {\n            // Store setTimeout reference so es6-promise will be unaffected by\n            // other code modifying setTimeout (like sinon.useFakeTimers())\n            var globalSetTimeout = setTimeout;\n            return function () {\n              return globalSetTimeout(flush, 1);\n            };\n          }\n\n          var queue = new Array(1000);\n\n          function flush() {\n            for (var i = 0; i < len; i += 2) {\n              var callback = queue[i];\n              var arg = queue[i + 1];\n              callback(arg);\n              queue[i] = undefined;\n              queue[i + 1] = undefined;\n            }\n\n            len = 0;\n          }\n\n          function attemptVertx() {\n            try {\n              var vertx = Function('return this')().require('vertx');\n\n              vertxNext = vertx.runOnLoop || vertx.runOnContext;\n              return useVertxTimer();\n            } catch (e) {\n              return useSetTimeout();\n            }\n          }\n\n          var scheduleFlush = void 0; // Decide what async method to use to triggering processing of queued callbacks:\n\n          if (isNode) {\n            scheduleFlush = useNextTick();\n          } else if (BrowserMutationObserver) {\n            scheduleFlush = useMutationObserver();\n          } else if (isWorker) {\n            scheduleFlush = useMessageChannel();\n          } else if (browserWindow === undefined && typeof require === 'function') {\n            scheduleFlush = attemptVertx();\n          } else {\n            scheduleFlush = useSetTimeout();\n          }\n\n          function then(onFulfillment, onRejection) {\n            var parent = this;\n            var child = new this.constructor(noop);\n\n            if (child[PROMISE_ID] === undefined) {\n              makePromise(child);\n            }\n\n            var _state = parent._state;\n\n            if (_state) {\n              var callback = arguments[_state - 1];\n              asap(function () {\n                return invokeCallback(_state, child, callback, parent._result);\n              });\n            } else {\n              subscribe(parent, child, onFulfillment, onRejection);\n            }\n\n            return child;\n          }\n          /**\n            `Promise.resolve` returns a promise that will become resolved with the\n            passed `value`. It is shorthand for the following:\n          \n            ```javascript\n            let promise = new Promise(function(resolve, reject){\n              resolve(1);\n            });\n          \n            promise.then(function(value){\n              // value === 1\n            });\n            ```\n          \n            Instead of writing the above, your code now simply becomes the following:\n          \n            ```javascript\n            let promise = Promise.resolve(1);\n          \n            promise.then(function(value){\n              // value === 1\n            });\n            ```\n          \n            @method resolve\n            @static\n            @param {Any} value value that the returned promise will be resolved with\n            Useful for tooling.\n            @return {Promise} a promise that will become fulfilled with the given\n            `value`\n          */\n\n\n          function resolve$1(object) {\n            /*jshint validthis:true */\n            var Constructor = this;\n\n            if (object && _typeof(object) === 'object' && object.constructor === Constructor) {\n              return object;\n            }\n\n            var promise = new Constructor(noop);\n            resolve(promise, object);\n            return promise;\n          }\n\n          var PROMISE_ID = Math.random().toString(36).substring(2);\n\n          function noop() {}\n\n          var PENDING = void 0;\n          var FULFILLED = 1;\n          var REJECTED = 2;\n          var TRY_CATCH_ERROR = {\n            error: null\n          };\n\n          function selfFulfillment() {\n            return new TypeError(\"You cannot resolve a promise with itself\");\n          }\n\n          function cannotReturnOwn() {\n            return new TypeError('A promises callback cannot return that same promise.');\n          }\n\n          function getThen(promise) {\n            try {\n              return promise.then;\n            } catch (error) {\n              TRY_CATCH_ERROR.error = error;\n              return TRY_CATCH_ERROR;\n            }\n          }\n\n          function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n            try {\n              then$$1.call(value, fulfillmentHandler, rejectionHandler);\n            } catch (e) {\n              return e;\n            }\n          }\n\n          function handleForeignThenable(promise, thenable, then$$1) {\n            asap(function (promise) {\n              var sealed = false;\n              var error = tryThen(then$$1, thenable, function (value) {\n                if (sealed) {\n                  return;\n                }\n\n                sealed = true;\n\n                if (thenable !== value) {\n                  resolve(promise, value);\n                } else {\n                  fulfill(promise, value);\n                }\n              }, function (reason) {\n                if (sealed) {\n                  return;\n                }\n\n                sealed = true;\n                reject(promise, reason);\n              }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n              if (!sealed && error) {\n                sealed = true;\n                reject(promise, error);\n              }\n            }, promise);\n          }\n\n          function handleOwnThenable(promise, thenable) {\n            if (thenable._state === FULFILLED) {\n              fulfill(promise, thenable._result);\n            } else if (thenable._state === REJECTED) {\n              reject(promise, thenable._result);\n            } else {\n              subscribe(thenable, undefined, function (value) {\n                return resolve(promise, value);\n              }, function (reason) {\n                return reject(promise, reason);\n              });\n            }\n          }\n\n          function handleMaybeThenable(promise, maybeThenable, then$$1) {\n            if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n              handleOwnThenable(promise, maybeThenable);\n            } else {\n              if (then$$1 === TRY_CATCH_ERROR) {\n                reject(promise, TRY_CATCH_ERROR.error);\n                TRY_CATCH_ERROR.error = null;\n              } else if (then$$1 === undefined) {\n                fulfill(promise, maybeThenable);\n              } else if (isFunction(then$$1)) {\n                handleForeignThenable(promise, maybeThenable, then$$1);\n              } else {\n                fulfill(promise, maybeThenable);\n              }\n            }\n          }\n\n          function resolve(promise, value) {\n            if (promise === value) {\n              reject(promise, selfFulfillment());\n            } else if (objectOrFunction(value)) {\n              handleMaybeThenable(promise, value, getThen(value));\n            } else {\n              fulfill(promise, value);\n            }\n          }\n\n          function publishRejection(promise) {\n            if (promise._onerror) {\n              promise._onerror(promise._result);\n            }\n\n            publish(promise);\n          }\n\n          function fulfill(promise, value) {\n            if (promise._state !== PENDING) {\n              return;\n            }\n\n            promise._result = value;\n            promise._state = FULFILLED;\n\n            if (promise._subscribers.length !== 0) {\n              asap(publish, promise);\n            }\n          }\n\n          function reject(promise, reason) {\n            if (promise._state !== PENDING) {\n              return;\n            }\n\n            promise._state = REJECTED;\n            promise._result = reason;\n            asap(publishRejection, promise);\n          }\n\n          function subscribe(parent, child, onFulfillment, onRejection) {\n            var _subscribers = parent._subscribers;\n            var length = _subscribers.length;\n            parent._onerror = null;\n            _subscribers[length] = child;\n            _subscribers[length + FULFILLED] = onFulfillment;\n            _subscribers[length + REJECTED] = onRejection;\n\n            if (length === 0 && parent._state) {\n              asap(publish, parent);\n            }\n          }\n\n          function publish(promise) {\n            var subscribers = promise._subscribers;\n            var settled = promise._state;\n\n            if (subscribers.length === 0) {\n              return;\n            }\n\n            var child = void 0,\n                callback = void 0,\n                detail = promise._result;\n\n            for (var i = 0; i < subscribers.length; i += 3) {\n              child = subscribers[i];\n              callback = subscribers[i + settled];\n\n              if (child) {\n                invokeCallback(settled, child, callback, detail);\n              } else {\n                callback(detail);\n              }\n            }\n\n            promise._subscribers.length = 0;\n          }\n\n          function tryCatch(callback, detail) {\n            try {\n              return callback(detail);\n            } catch (e) {\n              TRY_CATCH_ERROR.error = e;\n              return TRY_CATCH_ERROR;\n            }\n          }\n\n          function invokeCallback(settled, promise, callback, detail) {\n            var hasCallback = isFunction(callback),\n                value = void 0,\n                error = void 0,\n                succeeded = void 0,\n                failed = void 0;\n\n            if (hasCallback) {\n              value = tryCatch(callback, detail);\n\n              if (value === TRY_CATCH_ERROR) {\n                failed = true;\n                error = value.error;\n                value.error = null;\n              } else {\n                succeeded = true;\n              }\n\n              if (promise === value) {\n                reject(promise, cannotReturnOwn());\n                return;\n              }\n            } else {\n              value = detail;\n              succeeded = true;\n            }\n\n            if (promise._state !== PENDING) {// noop\n            } else if (hasCallback && succeeded) {\n              resolve(promise, value);\n            } else if (failed) {\n              reject(promise, error);\n            } else if (settled === FULFILLED) {\n              fulfill(promise, value);\n            } else if (settled === REJECTED) {\n              reject(promise, value);\n            }\n          }\n\n          function initializePromise(promise, resolver) {\n            try {\n              resolver(function resolvePromise(value) {\n                resolve(promise, value);\n              }, function rejectPromise(reason) {\n                reject(promise, reason);\n              });\n            } catch (e) {\n              reject(promise, e);\n            }\n          }\n\n          var id = 0;\n\n          function nextId() {\n            return id++;\n          }\n\n          function makePromise(promise) {\n            promise[PROMISE_ID] = id++;\n            promise._state = undefined;\n            promise._result = undefined;\n            promise._subscribers = [];\n          }\n\n          function validationError() {\n            return new Error('Array Methods must be provided an Array');\n          }\n\n          var Enumerator = function () {\n            function Enumerator(Constructor, input) {\n              this._instanceConstructor = Constructor;\n              this.promise = new Constructor(noop);\n\n              if (!this.promise[PROMISE_ID]) {\n                makePromise(this.promise);\n              }\n\n              if (isArray(input)) {\n                this.length = input.length;\n                this._remaining = input.length;\n                this._result = new Array(this.length);\n\n                if (this.length === 0) {\n                  fulfill(this.promise, this._result);\n                } else {\n                  this.length = this.length || 0;\n\n                  this._enumerate(input);\n\n                  if (this._remaining === 0) {\n                    fulfill(this.promise, this._result);\n                  }\n                }\n              } else {\n                reject(this.promise, validationError());\n              }\n            }\n\n            Enumerator.prototype._enumerate = function _enumerate(input) {\n              for (var i = 0; this._state === PENDING && i < input.length; i++) {\n                this._eachEntry(input[i], i);\n              }\n            };\n\n            Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n              var c = this._instanceConstructor;\n              var resolve$$1 = c.resolve;\n\n              if (resolve$$1 === resolve$1) {\n                var _then = getThen(entry);\n\n                if (_then === then && entry._state !== PENDING) {\n                  this._settledAt(entry._state, i, entry._result);\n                } else if (typeof _then !== 'function') {\n                  this._remaining--;\n                  this._result[i] = entry;\n                } else if (c === Promise$1) {\n                  var promise = new c(noop);\n                  handleMaybeThenable(promise, entry, _then);\n\n                  this._willSettleAt(promise, i);\n                } else {\n                  this._willSettleAt(new c(function (resolve$$1) {\n                    return resolve$$1(entry);\n                  }), i);\n                }\n              } else {\n                this._willSettleAt(resolve$$1(entry), i);\n              }\n            };\n\n            Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n              var promise = this.promise;\n\n              if (promise._state === PENDING) {\n                this._remaining--;\n\n                if (state === REJECTED) {\n                  reject(promise, value);\n                } else {\n                  this._result[i] = value;\n                }\n              }\n\n              if (this._remaining === 0) {\n                fulfill(promise, this._result);\n              }\n            };\n\n            Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n              var enumerator = this;\n              subscribe(promise, undefined, function (value) {\n                return enumerator._settledAt(FULFILLED, i, value);\n              }, function (reason) {\n                return enumerator._settledAt(REJECTED, i, reason);\n              });\n            };\n\n            return Enumerator;\n          }();\n          /**\n            `Promise.all` accepts an array of promises, and returns a new promise which\n            is fulfilled with an array of fulfillment values for the passed promises, or\n            rejected with the reason of the first passed promise to be rejected. It casts all\n            elements of the passed iterable to promises as it runs this algorithm.\n          \n            Example:\n          \n            ```javascript\n            let promise1 = resolve(1);\n            let promise2 = resolve(2);\n            let promise3 = resolve(3);\n            let promises = [ promise1, promise2, promise3 ];\n          \n            Promise.all(promises).then(function(array){\n              // The array here would be [ 1, 2, 3 ];\n            });\n            ```\n          \n            If any of the `promises` given to `all` are rejected, the first promise\n            that is rejected will be given as an argument to the returned promises's\n            rejection handler. For example:\n          \n            Example:\n          \n            ```javascript\n            let promise1 = resolve(1);\n            let promise2 = reject(new Error(\"2\"));\n            let promise3 = reject(new Error(\"3\"));\n            let promises = [ promise1, promise2, promise3 ];\n          \n            Promise.all(promises).then(function(array){\n              // Code here never runs because there are rejected promises!\n            }, function(error) {\n              // error.message === \"2\"\n            });\n            ```\n          \n            @method all\n            @static\n            @param {Array} entries array of promises\n            @param {String} label optional string for labeling the promise.\n            Useful for tooling.\n            @return {Promise} promise that is fulfilled when all `promises` have been\n            fulfilled, or rejected if any of them become rejected.\n            @static\n          */\n\n\n          function all(entries) {\n            return new Enumerator(this, entries).promise;\n          }\n          /**\n            `Promise.race` returns a new promise which is settled in the same way as the\n            first passed promise to settle.\n          \n            Example:\n          \n            ```javascript\n            let promise1 = new Promise(function(resolve, reject){\n              setTimeout(function(){\n                resolve('promise 1');\n              }, 200);\n            });\n          \n            let promise2 = new Promise(function(resolve, reject){\n              setTimeout(function(){\n                resolve('promise 2');\n              }, 100);\n            });\n          \n            Promise.race([promise1, promise2]).then(function(result){\n              // result === 'promise 2' because it was resolved before promise1\n              // was resolved.\n            });\n            ```\n          \n            `Promise.race` is deterministic in that only the state of the first\n            settled promise matters. For example, even if other promises given to the\n            `promises` array argument are resolved, but the first settled promise has\n            become rejected before the other promises became fulfilled, the returned\n            promise will become rejected:\n          \n            ```javascript\n            let promise1 = new Promise(function(resolve, reject){\n              setTimeout(function(){\n                resolve('promise 1');\n              }, 200);\n            });\n          \n            let promise2 = new Promise(function(resolve, reject){\n              setTimeout(function(){\n                reject(new Error('promise 2'));\n              }, 100);\n            });\n          \n            Promise.race([promise1, promise2]).then(function(result){\n              // Code here never runs\n            }, function(reason){\n              // reason.message === 'promise 2' because promise 2 became rejected before\n              // promise 1 became fulfilled\n            });\n            ```\n          \n            An example real-world use case is implementing timeouts:\n          \n            ```javascript\n            Promise.race([ajax('foo.json'), timeout(5000)])\n            ```\n          \n            @method race\n            @static\n            @param {Array} promises array of promises to observe\n            Useful for tooling.\n            @return {Promise} a promise which settles in the same way as the first passed\n            promise to settle.\n          */\n\n\n          function race(entries) {\n            /*jshint validthis:true */\n            var Constructor = this;\n\n            if (!isArray(entries)) {\n              return new Constructor(function (_, reject) {\n                return reject(new TypeError('You must pass an array to race.'));\n              });\n            } else {\n              return new Constructor(function (resolve, reject) {\n                var length = entries.length;\n\n                for (var i = 0; i < length; i++) {\n                  Constructor.resolve(entries[i]).then(resolve, reject);\n                }\n              });\n            }\n          }\n          /**\n            `Promise.reject` returns a promise rejected with the passed `reason`.\n            It is shorthand for the following:\n          \n            ```javascript\n            let promise = new Promise(function(resolve, reject){\n              reject(new Error('WHOOPS'));\n            });\n          \n            promise.then(function(value){\n              // Code here doesn't run because the promise is rejected!\n            }, function(reason){\n              // reason.message === 'WHOOPS'\n            });\n            ```\n          \n            Instead of writing the above, your code now simply becomes the following:\n          \n            ```javascript\n            let promise = Promise.reject(new Error('WHOOPS'));\n          \n            promise.then(function(value){\n              // Code here doesn't run because the promise is rejected!\n            }, function(reason){\n              // reason.message === 'WHOOPS'\n            });\n            ```\n          \n            @method reject\n            @static\n            @param {Any} reason value that the returned promise will be rejected with.\n            Useful for tooling.\n            @return {Promise} a promise rejected with the given `reason`.\n          */\n\n\n          function reject$1(reason) {\n            /*jshint validthis:true */\n            var Constructor = this;\n            var promise = new Constructor(noop);\n            reject(promise, reason);\n            return promise;\n          }\n\n          function needsResolver() {\n            throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n          }\n\n          function needsNew() {\n            throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n          }\n          /**\n            Promise objects represent the eventual result of an asynchronous operation. The\n            primary way of interacting with a promise is through its `then` method, which\n            registers callbacks to receive either a promise's eventual value or the reason\n            why the promise cannot be fulfilled.\n          \n            Terminology\n            -----------\n          \n            - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n            - `thenable` is an object or function that defines a `then` method.\n            - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n            - `exception` is a value that is thrown using the throw statement.\n            - `reason` is a value that indicates why a promise was rejected.\n            - `settled` the final resting state of a promise, fulfilled or rejected.\n          \n            A promise can be in one of three states: pending, fulfilled, or rejected.\n          \n            Promises that are fulfilled have a fulfillment value and are in the fulfilled\n            state.  Promises that are rejected have a rejection reason and are in the\n            rejected state.  A fulfillment value is never a thenable.\n          \n            Promises can also be said to *resolve* a value.  If this value is also a\n            promise, then the original promise's settled state will match the value's\n            settled state.  So a promise that *resolves* a promise that rejects will\n            itself reject, and a promise that *resolves* a promise that fulfills will\n            itself fulfill.\n          \n          \n            Basic Usage:\n            ------------\n          \n            ```js\n            let promise = new Promise(function(resolve, reject) {\n              // on success\n              resolve(value);\n          \n              // on failure\n              reject(reason);\n            });\n          \n            promise.then(function(value) {\n              // on fulfillment\n            }, function(reason) {\n              // on rejection\n            });\n            ```\n          \n            Advanced Usage:\n            ---------------\n          \n            Promises shine when abstracting away asynchronous interactions such as\n            `XMLHttpRequest`s.\n          \n            ```js\n            function getJSON(url) {\n              return new Promise(function(resolve, reject){\n                let xhr = new XMLHttpRequest();\n          \n                xhr.open('GET', url);\n                xhr.onreadystatechange = handler;\n                xhr.responseType = 'json';\n                xhr.setRequestHeader('Accept', 'application/json');\n                xhr.send();\n          \n                function handler() {\n                  if (this.readyState === this.DONE) {\n                    if (this.status === 200) {\n                      resolve(this.response);\n                    } else {\n                      reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n                    }\n                  }\n                };\n              });\n            }\n          \n            getJSON('/posts.json').then(function(json) {\n              // on fulfillment\n            }, function(reason) {\n              // on rejection\n            });\n            ```\n          \n            Unlike callbacks, promises are great composable primitives.\n          \n            ```js\n            Promise.all([\n              getJSON('/posts'),\n              getJSON('/comments')\n            ]).then(function(values){\n              values[0] // => postsJSON\n              values[1] // => commentsJSON\n          \n              return values;\n            });\n            ```\n          \n            @class Promise\n            @param {Function} resolver\n            Useful for tooling.\n            @constructor\n          */\n\n\n          var Promise$1 = function () {\n            function Promise(resolver) {\n              this[PROMISE_ID] = nextId();\n              this._result = this._state = undefined;\n              this._subscribers = [];\n\n              if (noop !== resolver) {\n                typeof resolver !== 'function' && needsResolver();\n                this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n              }\n            }\n            /**\n            The primary way of interacting with a promise is through its `then` method,\n            which registers callbacks to receive either a promise's eventual value or the\n            reason why the promise cannot be fulfilled.\n             ```js\n            findUser().then(function(user){\n              // user is available\n            }, function(reason){\n              // user is unavailable, and you are given the reason why\n            });\n            ```\n             Chaining\n            --------\n             The return value of `then` is itself a promise.  This second, 'downstream'\n            promise is resolved with the return value of the first promise's fulfillment\n            or rejection handler, or rejected if the handler throws an exception.\n             ```js\n            findUser().then(function (user) {\n              return user.name;\n            }, function (reason) {\n              return 'default name';\n            }).then(function (userName) {\n              // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n              // will be `'default name'`\n            });\n             findUser().then(function (user) {\n              throw new Error('Found user, but still unhappy');\n            }, function (reason) {\n              throw new Error('`findUser` rejected and we're unhappy');\n            }).then(function (value) {\n              // never reached\n            }, function (reason) {\n              // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n              // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n            });\n            ```\n            If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n             ```js\n            findUser().then(function (user) {\n              throw new PedagogicalException('Upstream error');\n            }).then(function (value) {\n              // never reached\n            }).then(function (value) {\n              // never reached\n            }, function (reason) {\n              // The `PedgagocialException` is propagated all the way down to here\n            });\n            ```\n             Assimilation\n            ------------\n             Sometimes the value you want to propagate to a downstream promise can only be\n            retrieved asynchronously. This can be achieved by returning a promise in the\n            fulfillment or rejection handler. The downstream promise will then be pending\n            until the returned promise is settled. This is called *assimilation*.\n             ```js\n            findUser().then(function (user) {\n              return findCommentsByAuthor(user);\n            }).then(function (comments) {\n              // The user's comments are now available\n            });\n            ```\n             If the assimliated promise rejects, then the downstream promise will also reject.\n             ```js\n            findUser().then(function (user) {\n              return findCommentsByAuthor(user);\n            }).then(function (comments) {\n              // If `findCommentsByAuthor` fulfills, we'll have the value here\n            }, function (reason) {\n              // If `findCommentsByAuthor` rejects, we'll have the reason here\n            });\n            ```\n             Simple Example\n            --------------\n             Synchronous Example\n             ```javascript\n            let result;\n             try {\n              result = findResult();\n              // success\n            } catch(reason) {\n              // failure\n            }\n            ```\n             Errback Example\n             ```js\n            findResult(function(result, err){\n              if (err) {\n                // failure\n              } else {\n                // success\n              }\n            });\n            ```\n             Promise Example;\n             ```javascript\n            findResult().then(function(result){\n              // success\n            }, function(reason){\n              // failure\n            });\n            ```\n             Advanced Example\n            --------------\n             Synchronous Example\n             ```javascript\n            let author, books;\n             try {\n              author = findAuthor();\n              books  = findBooksByAuthor(author);\n              // success\n            } catch(reason) {\n              // failure\n            }\n            ```\n             Errback Example\n             ```js\n             function foundBooks(books) {\n             }\n             function failure(reason) {\n             }\n             findAuthor(function(author, err){\n              if (err) {\n                failure(err);\n                // failure\n              } else {\n                try {\n                  findBoooksByAuthor(author, function(books, err) {\n                    if (err) {\n                      failure(err);\n                    } else {\n                      try {\n                        foundBooks(books);\n                      } catch(reason) {\n                        failure(reason);\n                      }\n                    }\n                  });\n                } catch(error) {\n                  failure(err);\n                }\n                // success\n              }\n            });\n            ```\n             Promise Example;\n             ```javascript\n            findAuthor().\n              then(findBooksByAuthor).\n              then(function(books){\n                // found books\n            }).catch(function(reason){\n              // something went wrong\n            });\n            ```\n             @method then\n            @param {Function} onFulfilled\n            @param {Function} onRejected\n            Useful for tooling.\n            @return {Promise}\n            */\n\n            /**\n            `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n            as the catch block of a try/catch statement.\n            ```js\n            function findAuthor(){\n            throw new Error('couldn't find that author');\n            }\n            // synchronous\n            try {\n            findAuthor();\n            } catch(reason) {\n            // something went wrong\n            }\n            // async with promises\n            findAuthor().catch(function(reason){\n            // something went wrong\n            });\n            ```\n            @method catch\n            @param {Function} onRejection\n            Useful for tooling.\n            @return {Promise}\n            */\n\n\n            Promise.prototype.catch = function _catch(onRejection) {\n              return this.then(null, onRejection);\n            };\n            /**\n              `finally` will be invoked regardless of the promise's fate just as native\n              try/catch/finally behaves\n            \n              Synchronous example:\n            \n              ```js\n              findAuthor() {\n                if (Math.random() > 0.5) {\n                  throw new Error();\n                }\n                return new Author();\n              }\n            \n              try {\n                return findAuthor(); // succeed or fail\n              } catch(error) {\n                return findOtherAuther();\n              } finally {\n                // always runs\n                // doesn't affect the return value\n              }\n              ```\n            \n              Asynchronous example:\n            \n              ```js\n              findAuthor().catch(function(reason){\n                return findOtherAuther();\n              }).finally(function(){\n                // author was either found, or not\n              });\n              ```\n            \n              @method finally\n              @param {Function} callback\n              @return {Promise}\n            */\n\n\n            Promise.prototype.finally = function _finally(callback) {\n              var promise = this;\n              var constructor = promise.constructor;\n              return promise.then(function (value) {\n                return constructor.resolve(callback()).then(function () {\n                  return value;\n                });\n              }, function (reason) {\n                return constructor.resolve(callback()).then(function () {\n                  throw reason;\n                });\n              });\n            };\n\n            return Promise;\n          }();\n\n          Promise$1.prototype.then = then;\n          Promise$1.all = all;\n          Promise$1.race = race;\n          Promise$1.resolve = resolve$1;\n          Promise$1.reject = reject$1;\n          Promise$1._setScheduler = setScheduler;\n          Promise$1._setAsap = setAsap;\n          Promise$1._asap = asap;\n          /*global self*/\n\n          function polyfill() {\n            var local = void 0;\n\n            if (typeof global !== 'undefined') {\n              local = global;\n            } else if (typeof self !== 'undefined') {\n              local = self;\n            } else {\n              try {\n                local = Function('return this')();\n              } catch (e) {\n                throw new Error('polyfill failed because global object is unavailable in this environment');\n              }\n            }\n\n            var P = local.Promise;\n\n            if (P) {\n              var promiseToString = null;\n\n              try {\n                promiseToString = Object.prototype.toString.call(P.resolve());\n              } catch (e) {// silently ignored\n              }\n\n              if (promiseToString === '[object Promise]' && !P.cast) {\n                return;\n              }\n            }\n\n            local.Promise = Promise$1;\n          } // Strange compat..\n\n\n          Promise$1.polyfill = polyfill;\n          Promise$1.Promise = Promise$1;\n          return Promise$1;\n        });\n      }).call(this, require('_process'), typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"_process\": 2\n    }],\n    2: [function (require, module, exports) {\n      // shim for using process in browser\n      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n      // don't break things.  But we need to wrap it in a try catch in case it is\n      // wrapped in strict mode code which doesn't define any globals.  It's inside a\n      // function because try/catches deoptimize in certain engines.\n\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n\n      function defaultSetTimout() {\n        throw new Error('setTimeout has not been defined');\n      }\n\n      function defaultClearTimeout() {\n        throw new Error('clearTimeout has not been defined');\n      }\n\n      (function () {\n        try {\n          if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n\n        try {\n          if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          //normal enviroments in sane situations\n          return setTimeout(fun, 0);\n        } // if setTimeout wasn't available but was latter defined\n\n\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          //normal enviroments in sane situations\n          return clearTimeout(marker);\n        } // if clearTimeout wasn't available but was latter defined\n\n\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n\n        draining = false;\n\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n\n          queueIndex = -1;\n          len = queue.length;\n        }\n\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n\n      process.nextTick = function (fun) {\n        var args = new Array(arguments.length - 1);\n\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n\n        queue.push(new Item(fun, args));\n\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      }; // v8 likes predictible objects\n\n\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n\n      Item.prototype.run = function () {\n        this.fun.apply(null, this.array);\n      };\n\n      process.title = 'browser';\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = ''; // empty string to avoid regexp issues\n\n      process.versions = {};\n\n      function noop() {}\n\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n\n      process.listeners = function (name) {\n        return [];\n      };\n\n      process.binding = function (name) {\n        throw new Error('process.binding is not supported');\n      };\n\n      process.cwd = function () {\n        return '/';\n      };\n\n      process.chdir = function (dir) {\n        throw new Error('process.chdir is not supported');\n      };\n\n      process.umask = function () {\n        return 0;\n      };\n    }, {}],\n    3: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      var Promise = require('es6-promise').Promise;\n      /**\n       * Map to hold easing functions.\n       * @type {Object}\n       */\n\n\n      var animMap = {\n        linear: function linear(t) {\n          return t;\n        },\n        easeInQuad: function easeInQuad(t) {\n          return t * t;\n        },\n        easeOutQuad: function easeOutQuad(t) {\n          return t * (2 - t);\n        },\n        easeInOutQuad: function easeInOutQuad(t) {\n          return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        },\n        easeInCubic: function easeInCubic(t) {\n          return t * t * t;\n        },\n        easeOutCubic: function easeOutCubic(t) {\n          return --t * t * t + 1;\n        },\n        easeInOutCubic: function easeInOutCubic(t) {\n          return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n        },\n        easeInQuart: function easeInQuart(t) {\n          return t * t * t * t;\n        },\n        easeOutQuart: function easeOutQuart(t) {\n          return 1 - --t * t * t * t;\n        },\n        easeInOutQuart: function easeInOutQuart(t) {\n          return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n        },\n        easeInQuint: function easeInQuint(t) {\n          return t * t * t * t * t;\n        },\n        easeOutQuint: function easeOutQuint(t) {\n          return 1 + --t * t * t * t * t;\n        },\n        easeInOutQuint: function easeInOutQuint(t) {\n          return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n        }\n      };\n      /**\n       * Gets an easing function based on supplied easing string.\n       * @param {String} easing - The easing id\n       * @returns {Function} - Returns the easing function\n       */\n\n      var getEasing = function getEasing(easing) {\n        var defaultEasing = 'linear',\n            easeFunc = animMap[easing || defaultEasing];\n\n        if (!easeFunc) {\n          console.debug('Scroll error: scroller does not support an easing option of ' + easing + '. Using \"' + defaultEasing + '\" instead');\n          easeFunc = animMap[easing];\n        }\n\n        return easeFunc;\n      };\n      /**\n       * Scroll class.\n       * @class Scroll\n       * @param {object} options - Options to pass\n       * @param {HTMLElement} options.el - The element to apply scroll to\n       */\n\n\n      var Scroll = function () {\n        /**\n         * When the scroll is instantiated.\n         * @param {HTMLElement} el - The element to scroll (the viewport)\n         */\n        function Scroll(el) {\n          _classCallCheck(this, Scroll);\n\n          if (el && !(el instanceof Node)) {\n            throw new Error('Scroll error: element passed to Scroll constructor must be a DOM node, you passed ' + el + '!');\n          }\n\n          this.el = el || this.document.body;\n        }\n        /**\n         * Gets the current scroll position of the scroll container.\n         * @returns {number}\n         */\n\n\n        _createClass(Scroll, [{\n          key: 'to',\n\n          /**\n           * Scrolls the element until it's scroll properties match the coordinates provided.\n           * @param {Number} x - The pixel along the horizontal axis of the element that you want displayed in the upper left.\n           * @param {Number} y - The pixel along the vertical axis of the element that you want displayed in the upper left.\n           * @param {Object} [options] - Scroll options\n           * @param {Number} [options.duration]- The amount of time for the animation\n           * @param {string} [options.easing] - The easing function to use\n           * @return {Promise}\n           */\n          value: function to(x, y, options) {\n            var _this = this;\n\n            options = options || {};\n            options.duration = options.duration || 400;\n            /**\n             * Sets element's property to a value.\n             * @param {string} prop - The property to set\n             * @param {Number} value - The number value\n             */\n\n            var moveElement = function moveElement(prop, value) {\n              var el = _this.el;\n              el[prop] = value; // scroll the html element also for cross-browser compatibility\n              // (ie. silly browsers like IE who need the html element to scroll too)\n\n              if (el === _this.document.body) {\n                _this.document.documentElement[prop] = value;\n              }\n            };\n            /**\n             * Does a bit of calculating and scrolls an element.\n             * @param {HTMLElement} el - The element to be scrolled\n             * @param {Number} from - The number of where to scroll from\n             * @param {Number} to - The number of where to scroll to\n             * @param {string} prop - The property to animate\n             * @param {Number} startTime - The timestamp of when the animation should start\n             * @param {Number} duration - The amount of time for the animation\n             * @param {Function} easeFunc - The easing function to use\n             * @param [callback]\n             */\n\n\n            var scroll = function scroll(el, from, to, prop, startTime, duration, easeFunc, callback) {\n              window.requestAnimationFrame(function () {\n                var currentTime = Date.now(),\n                    time = Math.min(1, (currentTime - startTime) / duration);\n\n                if (from === to) {\n                  return callback ? callback() : null;\n                }\n\n                moveElement(prop, easeFunc(time) * (to - from) + from);\n                /* prevent scrolling, if already there, or at end */\n\n                if (time < 1) {\n                  scroll(el, el[prop], to, prop, startTime, duration, easeFunc, callback);\n                } else if (callback) {\n                  callback();\n                }\n              });\n            };\n\n            return new Promise(function (resolve) {\n              scroll(_this.el, _this.scrollPosition, y, 'scrollTop', Date.now(), options.duration, getEasing(options.easing), resolve);\n            });\n          }\n          /**\n           * Returns document element\n           * @returns {HTMLDocument}\n           */\n\n        }, {\n          key: 'toElement',\n\n          /**\n           * Scroll to an element.\n           * @param {HTMLElement} el - The element to scroll to.\n           * @param {Object} [options] - The scroll options\n           */\n          value: function toElement(el, options) {\n            var container = this.el;\n            var currentContainerScrollYPos = 0;\n            var elementScrollYPos = el ? el.offsetTop : 0;\n            var errorMsg = void 0;\n\n            if (!el) {\n              errorMsg = 'The element passed to Scroll.toElement() was undefined';\n              console.error(errorMsg);\n              return Promise.reject(new Error(errorMsg));\n            } // if the container is the document body or document itself, we'll\n            // need a different set of coordinates for accuracy\n\n\n            if (container === this.document.body) {\n              // using pageYOffset for cross-browser compatibility\n              currentContainerScrollYPos = window.pageYOffset; // must add containers scroll y position to ensure an absolute value that does not change\n\n              elementScrollYPos = el.getBoundingClientRect().top + currentContainerScrollYPos;\n            }\n\n            return this.to(0, elementScrollYPos, options);\n          }\n          /**\n           * Use this to clean up the DOM when done.\n           */\n\n        }, {\n          key: 'destroy',\n          value: function destroy() {}\n        }, {\n          key: 'scrollPosition',\n          get: function get() {\n            var el = this.el,\n                document = this.document;\n\n            if (el === document.body) {\n              return document.body.scrollTop || document.documentElement.scrollTop;\n            } else {\n              return el.scrollTop;\n            }\n          }\n        }, {\n          key: 'document',\n          get: function get() {\n            return document;\n          }\n        }]);\n\n        return Scroll;\n      }();\n\n      exports.default = Scroll;\n      module.exports = exports['default'];\n    }, {\n      \"es6-promise\": 1\n    }]\n  }, {}, [3])(3);\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/scroll-js/dist/scroll.js?");

/***/ })

}]);